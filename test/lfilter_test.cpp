


#include "doctest/doctest.h"
#include "xtensor/xview.hpp"
#include "xtensor/xsort.hpp"
#include "xtensor/xio.hpp"
#include "xtensor-io/xnpz.hpp"
#include "xtensor/xrandom.hpp"
#include "xtensor-signal/lfilter.hpp"

TEST_SUITE("lfilter")
{
    TEST_CASE("lfilter_IIR")
    {
        //credit https://rosettacode.org/wiki/Apply_a_digital_filter_(direct_form_II_transposed)#C++
        //define the signal 
        xt::xtensor<double, 1> sig = { -0.917843918645, 0.141984778794,1.20536903482,0.190286794412,-0.662370894973,-1.00700480494,
            -0.404707073677,0.800482325044,0.743500089861,1.01090520172,0.741527555207,
            0.277841675195,0.400833448236,-0.2085993586,-0.172842103641,-0.134316096293,
            0.0259303398477,0.490105989562,0.549391221511,0.9047198589 };

        xt::xtensor<double, 1> expectation = { -0.152974,-0.435258,-0.136043,0.697503,0.656445,
                                            -0.435483,-1.08924,-0.537677,0.51705,1.05225,0.961854,0.69569,0.424356,
                                            0.196262,-0.0278351,-0.211722,-0.174746,0.0692584,0.385446,0.651771 };

        //Constants for a Butterworth filter (order 3, low pass)
        xt::xtensor<float, 1> a = { 1.00000000, -2.77555756e-16, 3.33333333e-01, -1.85037171e-17 };
        xt::xtensor<float, 1> b = { 0.16666667, 0.5, 0.5, 0.16666667 };

        auto filt = xt::signal::lfilter<double>();
        auto res = filt.set_coeffs(b,a)(sig);

        auto indexes = xt::linspace(std::size_t(0), res.shape(0) - 1, res.shape(0));
        for (const auto& index : indexes)
        {
            REQUIRE_EQ(res(index), doctest::Approx(expectation(index)).epsilon(1e-3));
        }
    }

    TEST_CASE("lfilter_FIR")
    {
        //credit https://rosettacode.org/wiki/Apply_a_digital_filter_(direct_form_II_transposed)#C++
        //define the signal 
        xt::xtensor<double, 1> sig = {  
        1.10168563,  1.38191166,  1.29029608,  1.05666263,  0.94422545,
        0.95798688,  1.04630625,  1.24103669,  1.44362822,  1.38745155,
        1.03788056,  0.77561554,  0.91780505,  1.25377026,  1.34262046,
        1.11761007,  0.88006049,  0.80125178,  0.78213891,  0.7711632 ,
        0.85015107,  0.95156431,  0.84366613,  0.52683779,  0.33441325,
        0.46087048,  0.66083891,  0.63158023,  0.45030643,  0.36905465,
        0.38303655,  0.32286699,  0.23477111,  0.30990337,  0.48855565,
        0.49487231,  0.29017088,  0.15479253,  0.24169921,  0.36706079,
        0.36701158,  0.35201891,  0.4227153 ,  0.42250524,  0.23092439,
        0.0692671 ,  0.19940213,  0.47231721,  0.51117719,  0.26229594,
        0.03179207,  0.00435686,  0.06074625,  0.09208186,  0.1476988 ,
        0.1827861 ,  0.00417554, -0.36016119, -0.54303648, -0.33032288,
       -0.03107029, -0.07898129, -0.44459987, -0.7399276 , -0.77267023,
       -0.67610085, -0.57632652, -0.48423297, -0.50127813, -0.76260067,
       -1.10297157, -1.12822054, -0.76851604, -0.45858197, -0.57040277,
       -0.92540936, -1.1016765 , -0.99815193, -0.81847133, -0.68284651,
       -0.58417107, -0.60902498, -0.83918988, -1.06629994, -0.96526089,
       -0.5961816 , -0.39903969, -0.59174977, -0.88629163, -0.94566066,
       -0.8226437 , -0.74190448, -0.72044221, -0.67770083, -0.70767398,
       -0.9164552 , -1.12344019, -1.064848  , -0.83255968, -0.77532206 };

        xt::xtensor<double, 1> expectation = { 
       -1.58405013e-04, -2.90811822e-04, -1.69777617e-04,  3.73634468e-04,
        1.28292071e-03,  2.21598827e-03,  2.61368587e-03,  1.92263396e-03,
       -4.50468189e-05, -2.80243176e-03, -5.20347304e-03, -5.87320857e-03,
       -3.85600208e-03,  8.12846288e-04,  6.83117616e-03,  1.18176968e-02,
        1.30778923e-02,  8.81574532e-03, -7.06979478e-04, -1.26963378e-02,
       -2.24153609e-02, -2.47868428e-02, -1.65761755e-02,  1.60778671e-03,
        2.44561383e-02,  4.29981258e-02,  4.75490797e-02,  3.16950796e-02,
       -4.08205718e-03, -5.05287955e-02, -9.04651683e-02, -1.02554290e-01,
       -6.71446375e-02,  2.76101016e-02,  1.81419688e-01,  3.80809267e-01,
        6.01790210e-01,  8.15567238e-01,  9.95649818e-01,  1.12419752e+00,
        1.19563986e+00,  1.21661221e+00,  1.20254944e+00,  1.17226871e+00,
        1.14231727e+00,  1.12280609e+00,  1.11588808e+00,  1.11702453e+00,
        1.11813354e+00,  1.11119415e+00,  1.09104742e+00,  1.05667195e+00,
        1.01079957e+00,  9.58294813e-01,  9.04137167e-01,  8.51866870e-01,
        8.02944572e-01,  7.56980347e-01,  7.12535932e-01,  6.68146502e-01,
        6.23167080e-01,  5.78093982e-01,  5.34288704e-01,  4.93379894e-01,
        4.56715515e-01,  4.25058838e-01,  3.98542362e-01,  3.76841075e-01,
        3.59470402e-01,  3.46019962e-01,  3.36177074e-01,  3.29605417e-01,
        3.25865913e-01,  3.24440979e-01,  3.24876626e-01,  3.26365568e-01,
        3.28139695e-01,  3.29465961e-01,  3.29653347e-01,  3.27991440e-01,
        3.23759547e-01,  3.16318544e-01,  3.05152428e-01,  2.89820481e-01,
        2.69938784e-01,  2.45245700e-01,  2.15641510e-01,  1.81132756e-01,
        1.41786816e-01,  9.77896006e-02,  4.95115894e-02, -2.54089513e-03,
       -5.78234846e-02, -1.15757508e-01, -1.75663294e-01, -2.36762290e-01,
       -2.98256781e-01, -3.59364135e-01, -4.19282558e-01, -4.77201714e-01};

        //Constants for a Butterworth filter (order 3, low pass)
        xt::xtensor<float, 1> a = { 1.00000000 };
        xt::xtensor<float, 1> b = { 
       -1.43784223e-04, -8.36125348e-05,  1.19173505e-04,  4.25496657e-04,
        6.94633526e-04,  7.24177306e-04,  3.49521545e-04, -4.34584932e-04,
       -1.39563577e-03, -2.09179948e-03, -2.03164747e-03, -9.23555283e-04,
        1.09077195e-03,  3.35008833e-03,  4.82910680e-03,  4.53234580e-03,
        1.99921968e-03, -2.29961235e-03, -6.90182084e-03, -9.75295479e-03,
       -9.00084038e-03, -3.91590949e-03,  4.45649391e-03,  1.32770185e-02,
        1.86909952e-02,  1.72542180e-02,  7.54398817e-03, -8.67689478e-03,
       -2.63091689e-02, -3.80338221e-02, -3.64895345e-02, -1.68613380e-02,
        2.10120036e-02,  7.18301706e-02,  1.25749185e-01,  1.70866876e-01,
        1.96551032e-01,  1.96551032e-01,  1.70866876e-01,  1.25749185e-01,
        7.18301706e-02,  2.10120036e-02, -1.68613380e-02, -3.64895345e-02,
       -3.80338221e-02, -2.63091689e-02, -8.67689478e-03,  7.54398817e-03,
        1.72542180e-02,  1.86909952e-02,  1.32770185e-02,  4.45649391e-03,
       -3.91590949e-03, -9.00084038e-03, -9.75295479e-03, -6.90182084e-03,
       -2.29961235e-03,  1.99921968e-03,  4.53234580e-03,  4.82910680e-03,
        3.35008833e-03,  1.09077195e-03, -9.23555283e-04, -2.03164747e-03,
       -2.09179948e-03, -1.39563577e-03, -4.34584932e-04,  3.49521545e-04,
        7.24177306e-04,  6.94633526e-04,  4.25496657e-04,  1.19173505e-04,
       -8.36125348e-05, -1.43784223e-04 };

        auto filt = xt::signal::lfilter<double>();
        auto res = filt.set_coeffs(b,a)(sig);

        auto indexes = xt::linspace(std::size_t(0), res.shape(0) - 1, res.shape(0));
        for (const auto& index : indexes)
        {
            REQUIRE_EQ(res(index), doctest::Approx(expectation(index)).epsilon(1e-3));
        }
    }
}
